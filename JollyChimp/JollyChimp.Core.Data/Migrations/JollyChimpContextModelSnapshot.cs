// <auto-generated />
using System;
using JollyChimp.Core.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JollyChimp.Core.Data.Migrations
{
    [DbContext(typeof(JollyChimpContext))]
    partial class JollyChimpContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("JollyChimp")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthChecks.UI.Data.HealthCheckConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscoveryService")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Configurations", "JollyChimp");
                });

            modelBuilder.Entity("HealthChecks.UI.Data.HealthCheckExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscoveryService")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastExecuted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OnStateFrom")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Executions", "JollyChimp");
                });

            modelBuilder.Entity("HealthChecks.UI.Data.HealthCheckExecutionEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("HealthCheckExecutionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckExecutionId");

                    b.ToTable("HealthCheckExecutionEntries", "JollyChimp");
                });

            modelBuilder.Entity("HealthChecks.UI.Data.HealthCheckExecutionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HealthCheckExecutionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("On")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckExecutionId");

                    b.ToTable("HealthCheckExecutionHistories", "JollyChimp");
                });

            modelBuilder.Entity("HealthChecks.UI.Data.HealthCheckFailureNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HealthCheckName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsUpAndRunning")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastNotified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Failures", "JollyChimp");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.DeleteQueueEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("XabarilId")
                        .HasColumnType("int");

                    b.Property<string>("XabarilTableName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("ID");

                    b.ToTable("DeleteQueue", "JollyChimp");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.EndPointEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ApiPath")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("HealthChecksPredicate")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ID");

                    b.ToTable("EndPoints", "JollyChimp");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.HealthCheckEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HealthStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("HealthChecks", "JollyChimp");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.HealthCheckParameterEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("HealthCheckId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("HealthCheckId");

                    b.ToTable("HealthCheckParameters", "JollyChimp");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.ServerSettingEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("ID");

                    b.ToTable("ServerSettings", "JollyChimp");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "EvaluationTimeInSeconds",
                            Value = "10"
                        },
                        new
                        {
                            ID = 2,
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "ApiMaxActiveRequests",
                            Value = "50"
                        },
                        new
                        {
                            ID = 3,
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "MaximumHistoryEntriesPerEndpoint",
                            Value = "50"
                        },
                        new
                        {
                            ID = 4,
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "HeaderText",
                            Value = "Health Checks Dashboard"
                        },
                        new
                        {
                            ID = 5,
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "MinimumSecondsBetweenFailureNotifications",
                            Value = "30"
                        },
                        new
                        {
                            ID = 6,
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "NotifyUnHealthyOneTimeUntilChange",
                            Value = "false"
                        },
                        new
                        {
                            ID = 7,
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "UiRoutePath",
                            Value = "/hc-ui"
                        });
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.WebHookEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("WebHooks", "JollyChimp");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.WebHookParameterEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WebHookId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WebHookId");

                    b.ToTable("WebHookParameters", "JollyChimp");
                });

            modelBuilder.Entity("HealthChecks.UI.Data.HealthCheckExecutionEntry", b =>
                {
                    b.HasOne("HealthChecks.UI.Data.HealthCheckExecution", null)
                        .WithMany("Entries")
                        .HasForeignKey("HealthCheckExecutionId");
                });

            modelBuilder.Entity("HealthChecks.UI.Data.HealthCheckExecutionHistory", b =>
                {
                    b.HasOne("HealthChecks.UI.Data.HealthCheckExecution", null)
                        .WithMany("History")
                        .HasForeignKey("HealthCheckExecutionId");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.HealthCheckParameterEntity", b =>
                {
                    b.HasOne("JollyChimp.Core.Common.Entities.HealthCheckEntity", "HealthCheck")
                        .WithMany("HealthCheckParameters")
                        .HasForeignKey("HealthCheckId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HealthCheck");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.WebHookParameterEntity", b =>
                {
                    b.HasOne("JollyChimp.Core.Common.Entities.WebHookEntity", "WebHook")
                        .WithMany("WebHookParameters")
                        .HasForeignKey("WebHookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WebHook");
                });

            modelBuilder.Entity("HealthChecks.UI.Data.HealthCheckExecution", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("History");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.HealthCheckEntity", b =>
                {
                    b.Navigation("HealthCheckParameters");
                });

            modelBuilder.Entity("JollyChimp.Core.Common.Entities.WebHookEntity", b =>
                {
                    b.Navigation("WebHookParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
